/** leetcode problem 121 : Best Time to Buy and Sell Stock
// Say you have an array for which the ith element is the price of a given stock on day i.
// If you were only permitted to complete at most one transaction
// (ie, buy one and sell one share of the stock),
// design an algorithm to find the maximum profit.
//* my divide and conquer approach
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size()==0) return 0;
        for (int i = 0; i < prices.size() - 1; i++)
	{
		prices[i] = prices[i + 1] - prices[i];
	}
	prices[prices.size() - 1] = 0;
	int low = 0, high = prices.size() - 2;
	int maxPrt = maxSum(prices, low, high);
	return maxPrt;
        
    }
    
    int maxSum(vector<int>& prices, int low, int high)
{
	if (low >= high) 
	{
	    if(prices[low] >= 0) return prices[low];
	    else return 0;
	}
	int mid = (low + high) / 2, res;
	int sum = 0, maxSuml = 0, maxSumh = 0;
	for (int i = mid - 1; i >= low; i--)
	{
		sum += prices[i];
		if (sum > maxSuml)
			maxSuml = sum;
	}
	sum = 0;
	for (int j = mid + 1; j <= high; j++)
	{
		sum += prices[j];
		if (sum > maxSumh)
			maxSumh = sum;
	}
	res = maxSuml + prices[mid] + maxSumh;
	maxSuml = maxSum(prices, low, mid - 1);
	maxSumh = maxSum(prices, mid + 1, high);
	if (res < maxSuml)
		res = maxSuml;
	if (res < maxSumh)
		res = maxSumh;
	if(res < 0)
	    res = 0;
	return res;
}
};
